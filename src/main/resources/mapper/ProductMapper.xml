<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kgc.easybuy.dao.ProductMapper">
    <select id="getProductList" resultType="Product">
        select  p.id,
        p.name,
        description,
        price,
        stock,
        categoryLevelId,
        fileId,
        p.isDelete,
        p.createTime,
        filePath,
        c.name cname,
        parentId,
        type
        from easybuy_product p,easybuy_file f,easybuy_product_category c
        <where>
            p.id = f.productId and p.categoryLevelId = c.id
            and p.isDelete = 0
        </where>
    </select>

    <select id="getProductByCategoryId" parameterType="int" resultType="Product">
        SELECT p.id,
               p.name,
               description,
               price,
               stock,
               categoryLevelId,
               fileId,
               filePath,
               p.isDelete,
               p.createTime,
               c.name,
               parentId,
               type
        FROM easybuy_product p,easybuy_file f,easybuy_product_category c
        WHERE p.id = f.productId and p.categoryLevelId = c.id
          and p.isDelete = 0
          AND parentId IN (SELECT id FROM easybuy_product_category WHERE parentId = #{parentId})
    </select>

    <select id="getHotProduct" resultType="Product">
        SELECT  p.id,`name`,
                description,
                price,
                stock,
                categoryLevelId,
                fileId,
                p.createTime,
                filePath
        FROM easybuy_product p,easybuy_file f
        WHERE p.id = f.productId and p.isDelete = 0 and f.isDelete = 0  and p.id iN(SELECT productId
             FROM easybuy_order_detail
              GROUP BY productId)
            LIMIT 0,4
    </select>

    <select id="getProductById" parameterType="int" resultType="Product">
        select  p.id,
        p.name,
        description,
        price,
        stock,
        categoryLevelId,
        fileId,
        p.isDelete,
        p.createTime,
        filePath,
        c.name cname,
        parentId,
        type,
        b.id as brandId,
        b.name as brandName
        from easybuy_product p,easybuy_file f,easybuy_product_category c,easybuy_brand b
        <where>
            p.id = f.productId and p.categoryLevelId = c.id and b.id=p.brandId
            and p.id = #{id}
            and p.isDelete = 0
        </where>
    </select>
    <select id="getProducts"  resultType="Product">
        SELECT
            c.name as categoryName,p.id,
            p.name,
            description,
            price,
            stock,
            categoryLevelId,
            fileId,
            filePath,
            p.isDelete,
            p.createTime,
            b.name as brandName,
            parentId,
            type
        FROM easybuy_product p,easybuy_file f,easybuy_product_category c,easybuy_brand b
        WHERE p.id = f.productId and p.categoryLevelId = c.id and b.id=p.brandId
          and p.isDelete = 0

    </select>
    <update id="delProById">
        update easybuy_product
        set isDelete=1
        where id = #{id}
    </update>



    <insert id="addProduct" parameterType="Product" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO easybuy_product (description, name, price, brandId, stock, categoryLevelId, createTime)
        VALUES (#{description}, #{name}, #{price}, #{brandId}, #{stock}, #{categoryLevelId}, now());
    </insert>
    <insert id="addFile"  useGeneratedKeys="true" keyProperty="id">
        INSERT INTO easybuy_file (filePath, userId, createTime)
        VALUES (#{filePath}, #{userId}, now());
    </insert>
    <update id="updateProId"  >
        update easybuy_file set productId=#{proId} where id = #{id}
    </update>
    <update id="updateFileId"  >
        update easybuy_product set fileId=#{fileId} where id = #{id}
    </update>

    <select id="getProductByLogin"  resultType="Product">
        SELECT id, name, description, price, brandId, stock, categoryLevelId, fileId, isDelete, createTime
        from easybuy_product where isDelete=0 and name=#{loginName}

    </select>

    <update id="updateStock"  >
        update easybuy_product set stock=#{stock} where id = #{id}
    </update>
    <select id="getRecommendProduct" parameterType="Product" resultType="Product">
        SELECT  p.id,
                p.name,
                description,
                price,
                stock,
                categoryLevelId,
                fileId,
                p.isDelete,
                p.createTime,
                filePath,
                c.name cname,
                parentId,
                type FROM easybuy_product p,easybuy_product_category c,easybuy_file
        WHERE p.categoryLevelId = c.id and productId = p.id
          AND c.parentId = #{parentId} AND p.id != #{id} AND p.isDelete = 0
        limit 0,3
    </select>

    <select id="getProductListByproductList" resultType="Cat">
        SELECT
        c.name as categoryName,
        p.id,
        p.name,
        description,
        price,
        stock,
        categoryLevelId,
        fileId,
        filePath,
        p.isDelete,
        p.createTime,
        parentId,
        type
        FROM easybuy_product p, easybuy_file f, easybuy_product_category c
        WHERE p.id = f.productId
        AND p.categoryLevelId = c.id
        AND p.isDelete = 0
        AND p.id IN
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

</mapper>